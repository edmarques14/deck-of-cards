{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","image","alt","name","Component","API_BASE_URL","Game","state","deck","drawn","getCard","bind","a","axios","get","setState","data","cardUrl","deck_id","cardRes","success","Error","console","log","card","cards","st","id","code","value","suit","alert","map","c","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAqBeA,E,kDAlBX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJjB,OAKf,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALe,E,0CAOnB,WACI,OAEI,qBACIM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,UAAU,OAAOC,IAAKF,KAAKT,MAAMY,MAAOC,IAAKJ,KAAKT,MAAMc,W,GAbrDC,a,iBCGbC,G,MAAe,uCA0DNC,E,kDAxDX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDkB,MAAQ,CAAEC,KAAM,KAAMC,MAAO,IAClC,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAHA,E,4FAKnB,4BAAAC,EAAA,sEACuBC,IAAMC,IAAN,UAAaT,EAAb,iBADvB,OACUG,EADV,OAEIV,KAAKiB,SAAS,CAAEP,KAAMA,EAAKQ,OAF/B,gD,kHAIA,gCAAAJ,EAAA,sEAGYK,EAHZ,UAGyBZ,EAHzB,YAGyCP,KAAKS,MAAMC,KAAKU,QAHzD,mBAI4BL,IAAMC,IAAIG,GAJtC,WAIYE,EAJZ,QAKqBH,KAAKI,QAL1B,sBAMkB,IAAIC,MAAM,sBAN5B,OAQQC,QAAQC,IAAIJ,GACRK,EAAOL,EAAQH,KAAKS,MAAM,GAC9B3B,KAAKiB,UAAS,SAAAW,GAAE,MAAK,CACjBjB,MAAM,GAAD,mBACEiB,EAAGjB,OADL,CAED,CACIkB,GAAIH,EAAKI,KACT3B,MAAOuB,EAAKvB,MACZE,KAAK,GAAD,OAAKqB,EAAKK,MAAV,eAAsBL,EAAKM,aAhBnD,kDAqBQC,MAAM,EAAD,IArBb,0D,0EAyBA,WACI,IAAMN,EAAQ3B,KAAKS,MAAME,MAAMuB,KAAI,SAAAC,GAAC,OAChC,cAAC,EAAD,CACI9B,KAAM8B,EAAE9B,KACRF,MAAOgC,EAAEhC,OACJgC,EAAEN,OAGf,OACI,sBAAK5B,UAAU,OAAf,UACI,oBAAIA,UAAU,aAAd,uCACA,oBAAIA,UAAU,sBAAd,yDACA,wBAAQA,UAAU,WAAWmC,QAASpC,KAAKY,QAA3C,sBACA,qBAAKX,UAAU,gBAAf,SACK0B,W,GAjDFrB,aCKJ+B,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d6f49ef1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Card.css';\r\nclass Card extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let angle = Math.random() * 90 - 45;\r\n        let xPos = Math.random() * 40 - 20;\r\n        let yPos = Math.random() * 40 - 20;\r\n        this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <img\r\n                style={{ transform: this._transform }}\r\n                className=\"Card\" src={this.props.image} alt={this.props.name}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\nexport default Card;","import React, { Component } from 'react'\r\nimport Card from './Card';\r\nimport axios from 'axios';\r\nimport './Deck.css';\r\n\r\nconst API_BASE_URL = 'https://deckofcardsapi.com/api/deck';\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { deck: null, drawn: [] };\r\n        this.getCard = this.getCard.bind(this);\r\n    }\r\n    async componentDidMount() {\r\n        const deck = await axios.get(`${API_BASE_URL}/new/shuffle`);\r\n        this.setState({ deck: deck.data });\r\n    }\r\n    async getCard() {\r\n\r\n        try {\r\n            let cardUrl = `${API_BASE_URL}/${this.state.deck.deck_id}/draw/`;\r\n            let cardRes = await axios.get(cardUrl);\r\n            if (!cardRes.data.success) {\r\n                throw new Error(\"No card remaining!\");\r\n            }\r\n            console.log(cardRes);\r\n            let card = cardRes.data.cards[0];\r\n            this.setState(st => ({\r\n                drawn: [\r\n                    ...st.drawn,\r\n                    {\r\n                        id: card.code,\r\n                        image: card.image,\r\n                        name: `${card.value} of ${card.suit}`\r\n                    }\r\n                ]\r\n            }))\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const cards = this.state.drawn.map(c => (\r\n            <Card\r\n                name={c.name}\r\n                image={c.image}\r\n                key={c.id}\r\n            />\r\n        ))\r\n        return (\r\n            <div className=\"Deck\">\r\n                <h1 className=\"Deck-title\">♦ Card Dealer ♦</h1>\r\n                <h2 className=\"Deck-title subtitle\">♦ A little demo made with React ♦</h2>\r\n                <button className=\"Deck-btn\" onClick={this.getCard}>Get Card</button>\r\n                <div className=\"Deck-cardArea\">\r\n                    {cards}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}